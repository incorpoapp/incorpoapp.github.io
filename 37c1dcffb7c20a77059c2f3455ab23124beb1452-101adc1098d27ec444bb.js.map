{"version":3,"file":"37c1dcffb7c20a77059c2f3455ab23124beb1452-101adc1098d27ec444bb.js","mappings":"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","sources":["webpack://website/./node_modules/country-list/country-list.js","webpack://website/./src/pages/start-company/form/FormSubmittedAlert/index.tsx","webpack://website/./src/pages/start-company/form/index.tsx","webpack://website/./src/pages/start-company/form/steps/AboutBusinessStep/index.tsx","webpack://website/./src/pages/start-company/form/steps/BasicInfoStep/index.tsx","webpack://website/./src/pages/start-company/form/steps/MainStep/index.tsx"],"sourcesContent":["'use strict';\n\nvar data = require('./data.json');\n/** Precompute name and code lookups. */\n\n\nvar nameMap = {};\nvar codeMap = {};\ndata.forEach(mapCodeAndName);\n\nfunction mapCodeAndName(country) {\n  nameMap[country.name.toLowerCase()] = country.code;\n  codeMap[country.code.toLowerCase()] = country.name;\n}\n\nexports.overwrite = function overwrite(countries) {\n  if (!countries || !countries.length) return;\n  countries.forEach(function (country) {\n    var foundIndex = data.findIndex(function (item) {\n      return item.code === country.code;\n    });\n    data[foundIndex] = country;\n    mapCodeAndName(country);\n  });\n};\n\nexports.getCode = function getCode(name) {\n  return nameMap[name.toLowerCase()];\n};\n\nexports.getName = function getName(code) {\n  return codeMap[code.toLowerCase()];\n};\n\nexports.getNames = function getNames() {\n  return data.map(function (country) {\n    return country.name;\n  });\n};\n\nexports.getCodes = function getCodes() {\n  return data.map(function (country) {\n    return country.code;\n  });\n};\n\nexports.getCodeList = function getCodeList() {\n  return codeMap;\n};\n\nexports.getNameList = function getNameList() {\n  return nameMap;\n};\n\nexports.getData = function getData() {\n  return data;\n};","import React from 'react';\n\nexport default function FormSubmittedAlert() {\n  return (\n    <div\n      className=\"bg-blue-100 border-t border-b border-blue-500 text-blue-700 px-4 py-3\"\n      role=\"alert\"\n    >\n      <p className=\"font-bold\">Form submitted</p>\n      <p className=\"text-sm\">\n        Thank you we will contact with you as soon as possible!\n      </p>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { AiFillLeftCircle, AiFillRightCircle } from 'react-icons/ai';\nimport { SiMinutemailer } from 'react-icons/si';\nimport MainStep from './steps/MainStep';\nimport BasicInfoStep from './steps/BasicInfoStep';\nimport AboutBusinessStep from './steps/AboutBusinessStep';\nimport FormSubmittedAlert from './FormSubmittedAlert';\n\nexport default function JoinBetaForm() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const getStepPersentage = (stepNumber: number): string => {\n    switch (stepNumber) {\n      case 1:\n        return `33%`;\n      case 2:\n        return `66%`;\n      default:\n        return `100%`;\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setFormSubmitted(true);\n  };\n\n  const stepsComponents = [\n    <MainStep step={1} currentStep={currentStep} />,\n    <BasicInfoStep step={2} currentStep={currentStep} />,\n    <AboutBusinessStep step={3} currentStep={currentStep} />,\n  ];\n\n  const totalSteps = stepsComponents.length;\n\n  const isLastStep = currentStep === totalSteps;\n\n  return (\n    <form\n      className=\"antialiased bg-white text-gray-900 px-6\"\n      id=\"joinBeta\"\n      name=\"joinBeta\"\n      data-netlify=\"true\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"max-w-xl mx-auto py-12 divide-y md:max-w-4xl\">\n        <div className=\"py-1 mt-10\">\n          <h2 className=\"text-2xl font-bold p-4\">Join Beta</h2>\n          <div className=\"mt-2 max-w-md\">\n            <div className=\"grid grid-cols-1 gap-6\">\n              {formSubmitted ? (\n                <FormSubmittedAlert />\n              ) : (\n                <>\n                  <div\n                    className=\"flex items-center bg-blue-500 text-white text-sm px-4 py-3\"\n                    role=\"alert\"\n                  >\n                    <p className=\"text-white\">\n                      It will be completely FREE during the whole beta cycle.\n                      Don't worry, we won't spam you nor share information you\n                      provided in any way. You can opt out of our beta\n                      communication any time you want, but we greatly appreciate\n                      your trust on us.\n                    </p>\n                  </div>\n                  {stepsComponents}\n                </>\n              )}\n            </div>\n            <div className=\"flex justify-between mt-10\">\n              <button\n                type=\"button\"\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-xl shadow-xl transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110\"\n                style={{\n                  display:\n                    currentStep > 1 && !formSubmitted ? `inline` : `none`,\n                }}\n                onClick={() => setCurrentStep(currentStep - 1)}\n              >\n                <AiFillLeftCircle\n                  style={{ display: `inline` }}\n                  className=\"mr-2\"\n                />\n                Back\n              </button>\n              <button\n                type=\"submit\"\n                form=\"joinBeta\"\n                className=\"bg-slate-900 hover:bg-slate-700 text-white font-bold py-2 px-4 rounded-xl shadow-xl transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110\"\n                style={{\n                  display: isLastStep && !formSubmitted ? `inline` : `none`,\n                }}\n              >\n                <SiMinutemailer\n                  style={{ display: `inline` }}\n                  className=\"mr-2\"\n                />\n                Send\n              </button>\n              <button\n                type=\"button\"\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-xl shadow-xl transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110\"\n                style={{\n                  display: currentStep >= 1 && !isLastStep ? `inline` : `none`,\n                }}\n                onClick={() => setCurrentStep(currentStep + 1)}\n              >\n                Next\n                <AiFillRightCircle\n                  style={{ display: `inline` }}\n                  className=\"ml-2\"\n                />\n              </button>\n            </div>\n            {!formSubmitted ? (\n              <div className=\"w-full bg-gray-200 h-1 mt-10\">\n                <div\n                  className=\"bg-blue-600 h-1\"\n                  style={{ width: getStepPersentage(currentStep) }}\n                />\n                <p>Page {totalSteps} of 3</p>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n}\n","import React from 'react';\n\ninterface AboutBusinessStepProps {\n  step: number;\n  currentStep: number;\n}\n\nexport default function AboutBusinessStep({\n  step,\n  currentStep,\n}: AboutBusinessStepProps) {\n  if (step !== currentStep) {\n    return null;\n  }\n  const rolesList: Array<string> = [\n    `CEO`,\n    `CFO / Corp Management`,\n    `CTO / VP / Head / Director Engineering`,\n    `CPO / Head of Product`,\n    `Other C-suite`,\n    `Shareholder / Owner / Founder`,\n    `Board Member / Investor`,\n    `Advisor`,\n    `Partner`,\n    `Leader of Sales or Marketing`,\n    `Leader of Growth or BD`,\n    `Leader of Business Operations`,\n    `Leader of HR / People`,\n    `Legal / Counsel`,\n    `Non-executive Manager`,\n    `Software Engineer / Tech`,\n    `Hardware Engineer / Tech`,\n    `Product Manager`,\n    `Project / Program Manager`,\n    `Designer`,\n    `Marketing Manager (Branding, PR, Ads)`,\n    `Customer Service Manager`,\n    `Operations Manager`,\n    `Sales / BD Manager`,\n    `Finance / Accounting Manager`,\n    `Business / Data Analytics`,\n    `Procurement / Supply-Chain Manager`,\n    `Freelancer / Contractor`,\n    `Researcher`,\n  ];\n\n  const jurisdictionList: Array<string> = [\n    `Yes, incorporated`,\n    `No, not incorporated`,\n    `In the process of incorporation`,\n  ];\n\n  const jurisdictionRadios = jurisdictionList.map((name) => (\n    <div className=\"mt-2\">\n      <label className=\"rounded\">\n        <input\n          type=\"radio\"\n          className=\"\n      rounded\n      bg-gray-200\n      border-transparent\n      focus:border-transparent focus:bg-gray-200\n      text-gray-700\n      focus:ring-1 focus:ring-offset-2 focus:ring-gray-500\n      form-radio\n    \"\n          value={name}\n          name=\"jurisdiction\"\n          key={name}\n        />\n        {` `}\n        {name}\n      </label>\n    </div>\n  ));\n\n  const rolesCheckboxes = rolesList.map((name, index) => (\n    <div className=\"mt-2\">\n      <label\n        className=\"inline-flex items-center\"\n        htmlFor={`field-roles-${index}`}\n        key={name}\n      >\n        <input\n          id={`field-roles-${index}`}\n          type=\"checkbox\"\n          className=\"\n      rounded\n      bg-gray-200\n      border-transparent\n      focus:border-transparent focus:bg-gray-200\n      text-gray-700\n      focus:ring-1 focus:ring-offset-2 focus:ring-gray-500\n    \"\n        />\n        <span className=\"ml-2\">{name}</span>\n      </label>\n    </div>\n  ));\n  return (\n    <>\n      <label className=\"block\" htmlFor=\"businessName\">\n        <span className=\"text-gray-700\">\n          What's your company or business name?\n        </span>\n        <p className=\"text-xs\">\n          If you haven't decided on the company name, fill in the intended\n          project name. You can change it later.\n        </p>\n        <input\n          type=\"text\"\n          id=\"businessName\"\n          className=\"\n                    mt-1\n                    block\n                    w-full\n                    rounded-md\n                    bg-gray-100\n                    border-transparent\n                    focus:border-gray-500 focus:bg-white focus:ring-0\n                  \"\n          placeholder=\"Your answer\"\n        />\n      </label>\n      <label className=\"block\" htmlFor=\"website\">\n        <span className=\"text-gray-700\">What's the company website?</span>\n        <p className=\"text-xs\">\n          If you don't have a website yet, fill in any link that describes your\n          business.\n        </p>\n        <input\n          type=\"text\"\n          id=\"website\"\n          className=\"\n                    mt-1\n                    block\n                    w-full\n                    rounded-md\n                    bg-gray-100\n                    border-transparent\n                    focus:border-gray-500 focus:bg-white focus:ring-0\n                  \"\n          placeholder=\"Your answer\"\n        />\n      </label>\n      <label className=\"block\" htmlFor=\"businessName\">\n        <span className=\"text-gray-700\">What's your current job title?</span>\n        <input\n          type=\"text\"\n          id=\"businessName\"\n          className=\"\n                    mt-1\n                    block\n                    w-full\n                    rounded-md\n                    bg-gray-100\n                    border-transparent\n                    focus:border-gray-500 focus:bg-white focus:ring-0\n                  \"\n          placeholder=\"e.g. Software Engineer, CTO, CEO\"\n        />\n      </label>\n      <div className=\"block\">\n        <span className=\"text-gray-700\">\n          What roles do you have within the company?\n        </span>\n        <p className=\"text-xs\">Select all that applies to you.</p>\n        {rolesCheckboxes}\n      </div>\n      <label className=\"block\">\n        <span className=\"text-gray-700\">\n          Is the company registered in any jurisdiction?\n        </span>\n        {jurisdictionRadios}\n      </label>\n      <div className=\"block\">\n        <span className=\"text-gray-700\">\n          By signing up, I agree to the Terms of Service and Privacy Policy.\n        </span>\n        <span className=\"text-rose-500\">*</span>\n        <p className=\"text-xs\">\n          is committed to protecting and respecting your privacy, and we’ll only\n          use your personal information to administer your account and to\n          provide the products and services you requested from us. From time to\n          time, we would like to contact you about our products and services, as\n          well as other content that may be of interest to you.\n        </p>\n        <div className=\"mt-2\">\n          <label className=\"inline-flex items-center\" htmlFor=\"terms\">\n            <input\n              id=\"terms\"\n              type=\"checkbox\"\n              className=\"\n      rounded\n      bg-gray-200\n      border-transparent\n      focus:border-transparent focus:bg-gray-200\n      text-gray-700\n      focus:ring-1 focus:ring-offset-2 focus:ring-gray-500\n    \"\n            />\n            <span className=\"ml-2\">Yes, I agree</span>\n          </label>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport countryList from 'country-list';\n\ninterface BasicInfoStepProps {\n  step: number;\n  currentStep: number;\n}\n\nexport default function BasicInfoStep({\n  step,\n  currentStep,\n}: BasicInfoStepProps) {\n  if (step !== currentStep) {\n    return null;\n  }\n  const countriesOptions = countryList\n    .getData()\n    .map(({ code, name }) => <option key={code}>{name}</option>);\n  return (\n    <>\n      <label className=\"block\" htmlFor=\"firstName\">\n        <span className=\"text-gray-700\">What's your first name?</span>\n        <span className=\"text-rose-500\">*</span>\n        <input\n          type=\"text\"\n          id=\"firstName\"\n          className=\"\n                    mt-1\n                    block\n                    w-full\n                    rounded-md\n                    bg-gray-100\n                    border-transparent\n                    focus:border-gray-500 focus:bg-white focus:ring-0\n                  \"\n          placeholder=\"e.g. Satoshi\"\n        />\n      </label>\n      <label className=\"block\" htmlFor=\"lastName\">\n        <span className=\"text-gray-700\">And your last name</span>\n        <input\n          type=\"text\"\n          id=\"lastName\"\n          className=\"\n                    mt-1\n                    block\n                    w-full\n                    rounded-md\n                    bg-gray-100\n                    border-transparent\n                    focus:border-gray-500 focus:bg-white focus:ring-0\n                  \"\n          placeholder=\"e.g. Nakamoto\"\n        />\n      </label>\n      <label className=\"block\">\n        <span className=\"text-gray-700\">What's your country of residence?</span>\n        <select className=\"block w-full mt-1\" placeholder=\"Choose\">\n          <option>Choose...</option>\n          {countriesOptions}\n        </select>\n      </label>\n    </>\n  );\n}\n","import React from 'react';\n\ninterface MainStepProps {\n  step: number;\n  currentStep: number;\n}\n\nexport default function MainStep({ step, currentStep }: MainStepProps) {\n  if (step !== currentStep) {\n    return null;\n  }\n  const solutionsList: Array<string> = [\n    `Automate and Optimize Corporate Tax Filing`,\n    `Business Accounting`,\n    `Automate Payments`,\n    `Formulate B2B Contracts`,\n    `Incorporate Company`,\n    `Formulate Investment Agreements`,\n    `Establish Shareholder Agreements`,\n    `Get Funding`,\n    `Access Business Banking Services`,\n    `Discover Markets and Convert Prospects`,\n    `Scale Business Globally`,\n  ];\n\n  const solutionsCheckboxes = solutionsList.map((name, index) => (\n    <div className=\"mt-2\">\n      <label\n        className=\"inline-flex items-center\"\n        htmlFor={`field-solutions-${index}`}\n        key={name}\n      >\n        <input\n          id={`field-solutions-${index}`}\n          type=\"checkbox\"\n          name=\"solutions\"\n          className=\"\n      rounded\n      bg-gray-200\n      border-transparent\n      focus:border-transparent focus:bg-gray-200\n      text-gray-700\n      focus:ring-1 focus:ring-offset-2 focus:ring-gray-500\n    \"\n        />\n        <span className=\"ml-2\">{name}</span>\n      </label>\n    </div>\n  ));\n\n  return (\n    <>\n      <label className=\"block\" htmlFor=\"email\">\n        <span className=\"text-gray-700\">Email address</span>\n        <span className=\"text-rose-500\">*</span>\n        <input\n          type=\"email\"\n          id=\"email\"\n          className=\"\n              mt-1\n              block\n              w-full\n              rounded-md\n              bg-gray-100\n              border-transparent\n              focus:border-gray-500 focus:bg-white focus:ring-0\n              border-2\n              border-rose-500\n            \"\n          placeholder=\"john@example.com\"\n        />\n        <span className=\"text-sm text-rose-500\">\n          Please fill out this field\n        </span>\n      </label>\n      <div className=\"block\">\n        <span className=\"text-gray-700\">\n          What solutions are you looking for?\n        </span>\n        <span className=\"text-rose-500\">*</span>\n        {solutionsCheckboxes}\n      </div>\n    </>\n  );\n}\n"],"names":["data","nameMap","codeMap","mapCodeAndName","country","name","toLowerCase","code","forEach","exports","overwrite","countries","length","foundIndex","findIndex","item","getCode","getName","getNames","map","getCodes","getCodeList","getNameList","getData","FormSubmittedAlert","className","role","JoinBetaForm","useState","currentStep","setCurrentStep","formSubmitted","setFormSubmitted","stepsComponents","step","totalSteps","isLastStep","id","onSubmit","e","preventDefault","type","style","display","onClick","form","width","stepNumber","getStepPersentage","AboutBusinessStep","jurisdictionRadios","value","key","rolesCheckboxes","index","htmlFor","placeholder","BasicInfoStep","countriesOptions","countryList","MainStep","solutionsCheckboxes"],"sourceRoot":""}